struct ST_Lazy {
  #define lc (n << 1)
  #define rc ((n << 1) | 1)
  vector<int> t, lazy;
  int n;
  ST_Lazy(int N) {
    n = N;
    t.resize(4 * n + 8);
    lazy.resize(4 * n + 8);
  }
  inline void push(int n, int b, int e) {
    if (lazy[n] == 0) return;
    // change
    t[n] = t[n] + lazy[n];
    if (b != e) {
      // change
      lazy[lc] += lazy[n];
      lazy[rc] += lazy[n];
    }
    lazy[n] = 0;
  }
  inline long long combine(long long a,long long b) {
	  // change
      return min(a, b);
  }
  inline void pull(int n) {
	  // change
      t[n] = min(t[lc], t[rc]);
  }
  void upd(int n, int b, int e, int i, int j, int v) {
    push(n, b, e);
    if (j < b || e < i) return;
    if (i <= b && e <= j) {
      lazy[n] += v; // change
      push(n, b, e);
      return;
    }
    int mid = (b + e) >> 1;
    upd(lc, b, mid, i, j, v);
    upd(rc, mid + 1, e, i, j, v);
    pull(n);
  }
  int query(int n, int b, int e, int i, int j) {
    push(n, b, e);
    if (i <= b && e <= j) return t[n];
    int mid = (b + e) >> 1;
    if (j <= mid) return query(lc, b, mid, i, j);
    if (i > mid) return query(rc, mid + 1, e, i, j);
    return combine(query(lc, b, mid, i, j), query(rc, mid + 1, e, i, j));
  }
};
